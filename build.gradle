plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'checkstyle'
    id 'jacoco'
}

group = 'com.github.dimitryivaniuta'
version = '1.0.0'
description = 'Reactive Video Metadata Backend (WebFlux + JPA + Redis + Security + GraphQL + Resilience4j)'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withJavadocJar()
    withSourcesJar()
}

ext {
    resilience4jVersion  = '2.3.0'
    springdocVersion     = '2.8.9'       // monitor for patch release if CVE flagged
    flywayVersion        = '11.10.3'
    postgresDriverVersion= '42.7.7'
    testcontainersVersion= '1.21.3'
    // Force consistent lettuce / redis libs through Spring BOM
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    testCompileOnly {
        extendsFrom testAnnotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

dependencies {
    // Spring Boot & WebFlux / JPA / Security / GraphQL / Actuator
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'com.graphql-java:graphql-java:24.1'
    implementation 'com.graphql-java:graphql-java-extended-scalars:24.0'

    runtimeOnly 'org.postgresql:r2dbc-postgresql'   // R2DBC driver
    runtimeOnly 'org.postgresql:postgresql'         // need for Flyway (JDBC)

    // Redis reactive, caching
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'

    // Flyway + PostgreSQL
    implementation "org.flywaydb:flyway-core:${flywayVersion}"
    implementation "org.flywaydb:flyway-database-postgresql:${flywayVersion}"
    runtimeOnly "org.postgresql:postgresql:${postgresDriverVersion}"

    // Resilience4j
    implementation "io.github.resilience4j:resilience4j-spring-boot3:${resilience4jVersion}"

    // Observability & Tracing
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    implementation 'io.zipkin.reporter2:zipkin-reporter-brave'

    // OpenAPI / Swagger UI
    implementation "org.springdoc:springdoc-openapi-starter-webflux-ui:${springdocVersion}"

    // Utilities
    implementation 'org.apache.commons:commons-lang3:3.18.0'
    implementation 'org.apache.commons:commons-collections4:4.4'

    // Lombok & Configuration Processor
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.awaitility:awaitility:4.2.1'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
//    testImplementation 'org.testcontainers:redis'
    testImplementation 'org.testcontainers:testcontainers'
//    testImplementation 'com.redis.testcontainers:testcontainers-redis:2.2.4'

    // Devtools (optional)
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release = 21
    options.compilerArgs += ['-parameters', '-Xlint:deprecation', '-Xlint:unchecked']
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging {
        events 'FAILED', 'SKIPPED'
        exceptionFormat 'FULL'
    }
    systemProperty 'spring.profiles.active', System.getProperty('spring.profiles.active', 'test')
}

checkstyle {
    toolVersion    = '10.12.0'
    configFile     = rootProject.file('config/checkstyle.xml')
    showViolations = true
    ignoreFailures = false
}

jacoco {
    toolVersion = '0.8.13'
}

tasks.jacocoTestReport {
    dependsOn tasks.test
    reports {
        xml.required  = true
        html.required = true
    }
}

tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit { minimum = 0.40 }
        }
    }
}

tasks.test {
    finalizedBy tasks.jacocoTestReport
}

bootJar {
    archiveFileName = "video-metadata-backend-${version}.jar"

    // enable layered jar support
    layered {
        enabled = true
    }

    // include the Spring Boot launch script
    launchScript()
}
jar {
    enabled = false
}

springBoot {
    buildInfo()
}

// GraphQL SDL generation task (no external plugin)
def generatedGraphqlDir = layout.buildDirectory.dir("generated/graphql")

tasks.register('generateGraphqlSchema') {
    group = 'build'
    description = 'Generates GraphQL SDL from DTO record types via reflection'
    outputs.dir generatedGraphqlDir
    doLast {
        /* (inline Groovy reflection script as in previous example) */
    }
}

tasks.named('processResources') {
    dependsOn 'generateGraphqlSchema'
    doLast {
        copy {
            from generatedGraphqlDir
            include '*.graphqls'
            into "$buildDir/resources/main/graphql"
        }
    }
}
