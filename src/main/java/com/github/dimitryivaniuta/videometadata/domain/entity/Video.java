package com.github.dimitryivaniuta.videometadata.domain.entity;

import com.github.dimitryivaniuta.videometadata.domain.model.VideoCategory;
import com.github.dimitryivaniuta.videometadata.domain.model.VideoProvider;
import lombok.*;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.annotation.Version;
import org.springframework.data.relational.core.mapping.Column;
import org.springframework.data.relational.core.mapping.Table;

import java.time.Duration;
import java.time.Instant;
import java.time.ZonedDateTime;
import java.util.Objects;

/**
 * Reactive/R2DBC representation of a video row.
 *
 * <p>Notes:</p>
 * <ul>
 *   <li>No JPA annotations – only Spring Data (R2DBC) mapping.</li>
 *   <li>Relationships are expressed by foreign-key columns (no lazy proxies). We store {@code createdByUserId} instead of an entity reference.</li>
 *   <li>Enum values are persisted as ordinals via custom converters (see {@code VideoProviderWritingConverter}, etc.).</li>
 *   <li>Indexes/constraints are created by Flyway SQL (not via annotations).</li>
 * </ul>
 */
@Getter
@Setter
@Builder(toBuilder = true)
@NoArgsConstructor
@AllArgsConstructor
@Table("videos")
public class Video {

    /** Surrogate PK (generated by DB sequence/identity in Flyway DDL). */
    @Id
    private Long id;

    /** Ordinal enum – handled by R2DBC converters. */
    @Column("category")
    private VideoCategory category;

    /** Provider`-specific external video id (e.g. YouTube id). */
    @Column("external_video_id")
    private String externalVideoId;

    /** Our own external id field you mentioned earlier (keep if needed). */
    @Column("external_id")
    private String externalId;

    /** FK to users table – store id, not entity. */
    @Column("created_by_user_id")
    private Long createdByUserId;

    /** Long text. JSON not needed here – simple text column. */
    @Column("description")
    private String description;

    /** Duration in milliseconds; expose convenience getter/setter for Duration. */
    @Column("duration_ms")
    private long durationMillis;

    /** Enum provider stored as ordinal. */
    @Column("provider")
    private VideoProvider provider;

    /** Original upload datetime (timestamptz). */
    @Column("upload_date_time")
    private ZonedDateTime uploadDateTime;

    /** Title. */
    @Column("title")
    private String title;

    /** When imported into our system. */
    @Column("imported_at")
    private Instant importedAt;

    /** Auditing timestamps. */
    @CreatedDate
    @Column("created_at")
    private Instant createdAt;

    @LastModifiedDate
    @Column("updated_at")
    private Instant updatedAt;

    /** Optional optimistic-locking if you want it. */
    @Version
    @Column("version")
    private Long version;

    /* ---------------- Convenience ---------------- */

    public Duration getDuration() {
        return Duration.ofMillis(durationMillis);
    }

    public void setDuration(Duration d) {
        this.durationMillis = d == null ? 0L : d.toMillis();
    }

    /** Ensure audit/import timestamps are initialized if service skips auditing. */
    public void initTimestampsIfMissing() {
        Instant now = Instant.now();
        if (importedAt == null) importedAt = now;
        if (createdAt == null) createdAt = now;
        if (updatedAt == null) updatedAt = now;
    }

    /* ---------------- Equality / hashCode (by id) ---------------- */

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Video v)) return false;
        return id != null && Objects.equals(id, v.id);
    }

    @Override
    public int hashCode() {
        return 31;
    }
}
